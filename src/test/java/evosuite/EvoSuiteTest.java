/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 31 04:45:46 GMT 2025
 */

package test.java.evosuite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import main.java.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class EvoSuiteTest extends EvoSuiteRegressionTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack stack0 = new Stack(1604);
      stack0.push((-626));
      int int0 = stack0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack stack0 = new Stack(2794);
      stack0.push(2794);
      int int0 = stack0.pop();
      assertEquals(0, stack0.size());
      assertEquals(2794, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stack stack0 = new Stack(397);
      stack0.push(0);
      int int0 = stack0.peek();
      assertEquals(1, stack0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack stack0 = new Stack(2794);
      stack0.push(2794);
      int int0 = stack0.peek();
      assertEquals(1, stack0.size());
      assertEquals(2794, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stack stack0 = null;
      try {
        stack0 = new Stack((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.java.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack stack0 = new Stack(1604);
      stack0.push((-626));
      boolean boolean0 = stack0.isEmpty();
      assertEquals(1, stack0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stack stack0 = new Stack(1604);
      stack0.push((-626));
      int int0 = stack0.peek();
      assertEquals(1, stack0.size());
      assertEquals((-626), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack stack0 = new Stack(1604);
      int int0 = stack0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack stack0 = new Stack(2916);
      boolean boolean0 = stack0.isFull();
      assertEquals(0, stack0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stack stack0 = new Stack(1882);
      boolean boolean0 = stack0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack stack0 = new Stack(1604);
      stack0.push((-626));
      stack0.push(0);
      stack0.push((-1374));
      stack0.pop();
      stack0.pop();
      stack0.pop();
      // Undeclared exception!
      try { 
        stack0.peek();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack is empty
         //
         verifyException("main.java.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack stack0 = new Stack(2057);
      // Undeclared exception!
      try { 
        stack0.pop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack is empty
         //
         verifyException("main.java.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack stack0 = new Stack(1);
      stack0.push(1);
      // Undeclared exception!
      try { 
        stack0.push((-6959));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Stack is full
         //
         verifyException("main.java.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stack.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Stack stack0 = new Stack(0);
      boolean boolean0 = stack0.isFull();
      assertTrue(boolean0);
  }
}
